plugins {
    //docs dependency
    id "org.asciidoctor.convert" version "1.5.9.2"
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'MSE'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'


    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

}

test {
    //test task에서는 JUnit을 사용한다고 Gradle에 알려주는것
    //위 설정을 하지 않으면 아래처럼 jacocoTestReport Task와 jacocoTestCoverageVerification Task를 스킵하게 됨
    useJUnitPlatform()
    outputs.dir snippetsDir

    finalizedBy jacocoTestReport //테스트가 실행되고 리포트는 만들어진다.

    //jacoco 저장 위치 설정
//    jacoco {
//        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
//        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
//    }
}


jacocoTestReport{
    reports{
        //jacoco report 를 어떤 형식으로 볼것인지 알려준는것
        xml.enabled false
        csv.enabled true
        html.enabled true
    }
    dependsOn test //리포트가 만들어지기전에 테스트가 실행되어야 한다
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor                      // (9)
    from ("${asciidoctor.outputDir}/html5") {  // (10)
        into 'static/docs'
    }
}

jacoco {
    //jacoco 버전
    toolVersion = '0.8.6'
}

jacocoTestCoverageVerification{
    violationRules{
        rule{
            limit{
                minimum = 1.0
            }
        }
        rule {
            //룰을 간단히 켜고 끌 수 있다.
            enabled = true

            //룰을 체크할 단위는 클래스 단위이다
            element = 'CLASS'

            //브랜치 커버리지를 최소한 90% 만족시켜야 한다
            //브랜치 커버리지란 모든 조건식이 true/false를 가지게 되면 충족된다
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 한다.
            // Line은 구문이라고 생각하면 된다
            // 코드 한줄이 한번이상 실행된다면 충족된다
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
//              maximum = 8
            }

            //조건 커버리지라는 것도 있다
            // 모든 조건식의 내부 조건이 true/false를 가지게 되면 충족된다.
            // 내부조건이란 조건식 내부의 각각의 조건을 의미한다






            // 커버리지 체크를 제외할 클래스들
            excludes = [
//                    '*.test.*',
//                    '*.Kotlin*'
            ]
        }
    }
}

